DataClean <- function(data, region, CaseType) {
CleanedData <- data %>%
pivot_longer(cols = starts_with("X"),
names_to = "Date",
names_prefix = "X",
names_ptypes = list(week = integer()),
values_to = CaseType,
values_drop_na = TRUE)   %>%
mutate(Province.State = ifelse(Province.State %in% "", Country.Region, Province.State)) %>%
mutate(Date = as.Date(Date, "%m.%d.%y")) %>%
filter(Province.State == region) %>%
arrange(Date) %>%
mutate(ID = row_number())
return(CleanedData)
}
# Now we are cleaning data for each case
ConData <- DataClean(ConfirmedData,Region,"Confirmed")
RecData <- DataClean(RecoveredData,Region,"Recovered") %>% dplyr::select(ID,Recovered)
DeData <-DataClean(DeathData,Region,"Deaths")          %>% dplyr::select(ID,Deaths)
AllData <- list(ConData, RecData, DeData)              %>% reduce(left_join, by = "ID")
# In this code, we are generating the frames for animations.
frames <- AllData %>% accumulate_by(~ID)
write.csv(AllData,"F:/FINAL_CODES/R_Codes/Corona/ShinyApp/Corona/data/AllData.csv", row.names = FALSE)
write.csv(frames,"F:/FINAL_CODES/R_Codes/Corona/ShinyApp/Corona/data/frames.csv", row.names = FALSE)
################
library(stringr)
library(maps)
library(ggplot2)
library(sf)
library(dplyr)
library(raster)
library(GADMTools)
library(rgeos)
AllCountries <- map_data("world")
class(AllCountries)
AllCountries
# write(AllCountries$region,"NamesOfCountries.txt")
CountriesAvailable<- AllCountries %>% group_by(region) %>% summarise()
setdiff(as.character(Countriestable$Countries), CountriesAvailable$region)
Countriestable$Countries
# Changes reqruied in the names of the countries
Countriestable$Countries <- recode(Countriestable$Countries, "United States" = "USA")
Countriestable$Countries <- recode(Countriestable$Countries, "United Kingdom" = "UK")
# Updated on 19-03-20: Change of Republic of Korea to South Korea
Countriestable$Countries <- recode(Countriestable$Countries, "Republic of Korea" = "South Korea")
#Update
Countriestable$Countries <- recode(Countriestable$Countries, "North Macedonia" = "Macedonia")
Countriestable$Countries <- recode(Countriestable$Countries, "Bosnia" = "Bosnia and Herzegovina")
Countriestable$Countries <- recode(Countriestable$Countries, "Holy See (Vatican City)" = "Vatican")
Countriestable$Countries <- recode(Countriestable$Countries, "Czechia" = "Czech Republic")
# Update Dated 12-03-2020
Countriestable$Countries <- recode(Countriestable$Countries, "Brunei Darussalam" = "Brunei")
#Updated on 19-03-2020
Countriestable$Countries <- recode(Countriestable$Countries, "Eswatini" = "Swaziland")
Countriestable$Countries <- recode(Countriestable$Countries, "Ivory Coast (Côte d’Ivoire)" = "Ivory Coast")
Countriestable$Countries <- recode(Countriestable$Countries, "Congo" = "Democratic Republic of the Congo")
# Deleted the combinations of countries and the duplicated values. Combinations will be added later on for append separately.
#Updated on 19-03-2020
Countriestable<-Countriestable[!(Countriestable$Countries=="Antigua and Barbuda"),]
Countriestable<-Countriestable[!(Countriestable$Countries=="Democratic Republic of Congo"),]
Countriestable<-Countriestable[!(Countriestable$Countries=="Saint Vincent and the Grenadines"),]
Countriestable <- Countriestable[!(Countriestable$Countries=="Trinidad and Tobago"),]
#Updated on 19-03-2020
Country_Antigua <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Antigua")
Countriestable <-  rbind(Countriestable, Country_Antigua)
Country_Barbuda <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Barbuda")
Countriestable <-  rbind(Countriestable, Country_Barbuda)
# Added two new names and deleted their combination
#Updated on 19-03-2020
Country_SaintVincent <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Saint Vincent")
Countriestable <-  rbind(Countriestable, Country_SaintVincent)
Country_Grenadines <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Grenadines")
Countriestable <-  rbind(Countriestable, Country_Grenadines)
# Added two new names and deleted their combination
#Updated on 19-03-2020
Country_Trinidad <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Trinidad")
Countriestable <-  rbind(Countriestable, Country_Trinidad)
Country_Tobago <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Tobago")
Countriestable <-  rbind(Countriestable, Country_Tobago)
write.csv(Countriestable,"F:/FINAL_CODES/R_Codes/Corona/ShinyApp/Corona/data/Countriestable.csv", row.names = FALSE)
View(AllCountries)
runApp('F:/FINAL_CODES/R_Codes/Corona/ShinyApp/Corona')
library(rvest)
Main <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series"
# We are saving the links to each CSVs in separate objects
confirmed_Path <- file.path(Main,"time_series_19-covid-Confirmed.csv")
Deaths_Path    <- file.path(Main,"time_series_19-covid-Deaths.csv")
Recoverd_Path  <- file.path(Main,"time_series_19-covid-Recovered.csv")
# Now, we are reading the data stored in each link
ConfirmedData <- read.csv(confirmed_Path,stringsAsFactors = FALSE)
DeathData     <- read.csv(Deaths_Path,stringsAsFactors = FALSE)
RecoveredData <- read.csv(Recoverd_Path,stringsAsFactors = FALSE)
# Based on the region, the information will be fetched and prepared
Region <- "Pakistan"
# This function is important for making the data to be used in animations generated by Plotly
accumulate_by <- function(dat, var) {
var <- lazyeval::f_eval(var, dat)
lvls <- plotly:::getLevels(var)
dats <- lapply(seq_along(lvls),
function(x) {
cbind.data.frame(dat[var %in% lvls[seq(1, x)], ],
frame = lvls[[x]])})
dplyr::bind_rows(dats)}
# This DataClean function is requried to change the wide table into long table and then filtering the data according to region mentioned above
DataClean <- function(data, region, CaseType) {
CleanedData <- data %>%
pivot_longer(cols = starts_with("X"),
names_to = "Date",
names_prefix = "X",
names_ptypes = list(week = integer()),
values_to = CaseType,
values_drop_na = TRUE)   %>%
mutate(Province.State = ifelse(Province.State %in% "", Country.Region, Province.State)) %>%
mutate(Date = as.Date(Date, "%m.%d.%y")) %>%
filter(Province.State == region) %>%
arrange(Date) %>%
mutate(ID = row_number())
return(CleanedData)
}
# Now we are cleaning data for each case
ConData <- DataClean(ConfirmedData,Region,"Confirmed")
RecData <- DataClean(RecoveredData,Region,"Recovered") %>% dplyr::select(ID,Recovered)
DeData <-DataClean(DeathData,Region,"Deaths")          %>% dplyr::select(ID,Deaths)
AllData <- list(ConData, RecData, DeData)              %>% reduce(left_join, by = "ID")
# In this code, we are generating the frames for animations.
frames <- AllData %>% accumulate_by(~ID)
################
library(stringr)
library(maps)
library(ggplot2)
library(sf)
library(dplyr)
library(raster)
library(GADMTools)
library(rgeos)
AllCountries <- map_data("world")
class(AllCountries)
AllCountries
# write(AllCountries$region,"NamesOfCountries.txt")
CountriesAvailable<- AllCountries %>% group_by(region) %>% summarise()
setdiff(as.character(Countriestable$Countries), CountriesAvailable$region)
Countriestable$Countries
# Changes reqruied in the names of the countries
Countriestable$Countries <- recode(Countriestable$Countries, "United States" = "USA")
Countriestable$Countries <- recode(Countriestable$Countries, "United Kingdom" = "UK")
# Updated on 19-03-20: Change of Republic of Korea to South Korea
Countriestable$Countries <- recode(Countriestable$Countries, "Republic of Korea" = "South Korea")
#Update
Countriestable$Countries <- recode(Countriestable$Countries, "North Macedonia" = "Macedonia")
Countriestable$Countries <- recode(Countriestable$Countries, "Bosnia" = "Bosnia and Herzegovina")
Countriestable$Countries <- recode(Countriestable$Countries, "Holy See (Vatican City)" = "Vatican")
Countriestable$Countries <- recode(Countriestable$Countries, "Czechia" = "Czech Republic")
# Update Dated 12-03-2020
Countriestable$Countries <- recode(Countriestable$Countries, "Brunei Darussalam" = "Brunei")
#Updated on 19-03-2020
Countriestable$Countries <- recode(Countriestable$Countries, "Eswatini" = "Swaziland")
Countriestable$Countries <- recode(Countriestable$Countries, "Ivory Coast (Côte d’Ivoire)" = "Ivory Coast")
Countriestable$Countries <- recode(Countriestable$Countries, "Congo" = "Democratic Republic of the Congo")
# Deleted the combinations of countries and the duplicated values. Combinations will be added later on for append separately.
#Updated on 19-03-2020
Countriestable<-Countriestable[!(Countriestable$Countries=="Antigua and Barbuda"),]
Countriestable<-Countriestable[!(Countriestable$Countries=="Democratic Republic of Congo"),]
Countriestable<-Countriestable[!(Countriestable$Countries=="Saint Vincent and the Grenadines"),]
Countriestable <- Countriestable[!(Countriestable$Countries=="Trinidad and Tobago"),]
#Updated on 19-03-2020
Country_Antigua <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Antigua")
Countriestable <-  rbind(Countriestable, Country_Antigua)
Country_Barbuda <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Barbuda")
Countriestable <-  rbind(Countriestable, Country_Barbuda)
# Added two new names and deleted their combination
#Updated on 19-03-2020
Country_SaintVincent <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Saint Vincent")
Countriestable <-  rbind(Countriestable, Country_SaintVincent)
Country_Grenadines <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Grenadines")
Countriestable <-  rbind(Countriestable, Country_Grenadines)
# Added two new names and deleted their combination
#Updated on 19-03-2020
Country_Trinidad <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Trinidad")
Countriestable <-  rbind(Countriestable, Country_Trinidad)
Country_Tobago <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Tobago")
Countriestable <-  rbind(Countriestable, Country_Tobago)
# ==============================
write.csv(AllData,"F:/FINAL_CODES/Need to be uploaded into Github/flexdashboard/data/AllData.csv", row.names = FALSE)
write.csv(AllData,"F:/FINAL_CODES/R_Codes/Corona/ShinyApp/Corona/data/AllData.csv", row.names = FALSE)
write.csv(frames,"F:/FINAL_CODES/Need to be uploaded into Github/flexdashboard/data/frames.csv", row.names = FALSE)
write.csv(frames,"F:/FINAL_CODES/R_Codes/Corona/ShinyApp/Corona/data/frames.csv", row.names = FALSE)
write.csv(Countriestable,"F:/FINAL_CODES/Need to be uploaded into Github/flexdashboard/data/Countriestable.csv", row.names = FALSE)
write.csv(Countriestable,"F:/FINAL_CODES/R_Codes/Corona/ShinyApp/Corona/data/Countriestable.csv", row.names = FALSE)
flexdash_path <- "F:/FINAL_CODES/Need to be uploaded into Github/flexdashboard/data"
file.path(flexdash_path, "AllData.csv")
flexdash_path <- "F:/FINAL_CODES/Need to be uploaded into Github/flexdashboard/data"
file.path(flexdash_path, "AllData.csv")
flexdash_path <- "F:/FINAL_CODES/Need to be uploaded into Github/flexdashboard/data"
shinyapp_path <- "F:/FINAL_CODES/R_Codes/Corona/ShinyApp/Corona/data"
write.csv(AllData,file.path(flexdash_path, "AllData.csv"), row.names = FALSE)
write.csv(AllData,file.path(shinyapp_path, "AllData.csv"), row.names = FALSE)
write.csv(frames,file.path(flexdash_path, "frames.csv"), row.names = FALSE)
write.csv(frames,file.path(shinyapp_path, "frames.csv"), row.names = FALSE)
write.csv(Countriestable,file.path(flexdash_path, "Countriestable.csv"), row.names = FALSE)
write.csv(Countriestable,file.path(shinyapp_path, "Countriestable.csv"), row.names = FALSE)
CountriesAvailable<- AllCountries %>% group_by(region) %>% summarise()
setdiff(as.character(Countriestable$Countries), CountriesAvailable$region)
# Changes reqruied in the names of the countries
Countriestable$Countries <- recode(Countriestable$Countries, "United States" = "USA")
Countriestable$Countries <- recode(Countriestable$Countries, "United Kingdom" = "UK")
# Updated on 19-03-20: Change of Republic of Korea to South Korea
Countriestable$Countries <- recode(Countriestable$Countries, "The Republic of Korea" = "South Korea")
#Update
Countriestable$Countries <- recode(Countriestable$Countries, "North Macedonia" = "Macedonia")
Countriestable$Countries <- recode(Countriestable$Countries, "Bosnia" = "Bosnia and Herzegovina")
Countriestable$Countries <- recode(Countriestable$Countries, "Holy See (Vatican City)" = "Vatican")
Countriestable$Countries <- recode(Countriestable$Countries, "Czechia" = "Czech Republic")
# Update Dated 12-03-2020
Countriestable$Countries <- recode(Countriestable$Countries, "Brunei Darussalam" = "Brunei")
#Updated on 19-03-2020
Countriestable$Countries <- recode(Countriestable$Countries, "Eswatini" = "Swaziland")
Countriestable$Countries <- recode(Countriestable$Countries, "Ivory Coast (Côte d’Ivoire)" = "Ivory Coast")
Countriestable$Countries <- recode(Countriestable$Countries, "Congo" = "Democratic Republic of the Congo")
# Deleted the combinations of countries and the duplicated values. Combinations will be added later on for append separately.
#Updated on 19-03-2020
Countriestable<-Countriestable[!(Countriestable$Countries=="Antigua and Barbuda"),]
Countriestable<-Countriestable[!(Countriestable$Countries=="Democratic Republic of Congo"),]
Countriestable<-Countriestable[!(Countriestable$Countries=="Saint Vincent and the Grenadines"),]
Countriestable <- Countriestable[!(Countriestable$Countries=="Trinidad and Tobago"),]
#Updated on 19-03-2020
Country_Antigua <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Antigua")
Countriestable <-  rbind(Countriestable, Country_Antigua)
Country_Barbuda <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Barbuda")
Countriestable <-  rbind(Countriestable, Country_Barbuda)
# Added two new names and deleted their combination
#Updated on 19-03-2020
Country_SaintVincent <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Saint Vincent")
Countriestable <-  rbind(Countriestable, Country_SaintVincent)
Country_Grenadines <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Grenadines")
Countriestable <-  rbind(Countriestable, Country_Grenadines)
# Added two new names and deleted their combination
#Updated on 19-03-2020
Country_Trinidad <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Trinidad")
Countriestable <-  rbind(Countriestable, Country_Trinidad)
Country_Tobago <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Tobago")
Countriestable <-  rbind(Countriestable, Country_Tobago)
flexdash_path <- "F:/FINAL_CODES/Need to be uploaded into Github/flexdashboard/data"
shinyapp_path <- "F:/FINAL_CODES/R_Codes/Corona/ShinyApp/Corona/data"
write.csv(AllData,file.path(flexdash_path, "AllData.csv"), row.names = FALSE)
write.csv(AllData,file.path(shinyapp_path, "AllData.csv"), row.names = FALSE)
write.csv(frames,file.path(flexdash_path, "frames.csv"), row.names = FALSE)
write.csv(frames,file.path(shinyapp_path, "frames.csv"), row.names = FALSE)
write.csv(Countriestable,file.path(flexdash_path, "Countriestable.csv"), row.names = FALSE)
write.csv(Countriestable,file.path(shinyapp_path, "Countriestable.csv"), row.names = FALSE)
flexdash_path <- "F:/FINAL_CODES/Need to be uploaded into Github/flexdashboard/data"
shinyapp_path <- "F:/FINAL_CODES/R_Codes/Corona/ShinyApp/Corona/data"
write.csv(AllData,file.path(flexdash_path, "AllData.csv"), row.names = FALSE)
write.csv(AllData,file.path(shinyapp_path, "AllData.csv"), row.names = FALSE)
write.csv(frames,file.path(flexdash_path, "frames.csv"), row.names = FALSE)
write.csv(frames,file.path(shinyapp_path, "frames.csv"), row.names = FALSE)
write.csv(Countriestable,file.path(flexdash_path, "Countriestable.csv"), row.names = FALSE)
write.csv(Countriestable,file.path(shinyapp_path, "Countriestable.csv"), row.names = FALSE)
View(ConfirmedData)
View(ConData)
View(ConData)
View(ConfirmedData)
setdiff(as.character(ConfirmedData$Province.State), CountriesAvailable$region)
CountriesAvailable<- AllCountries %>% group_by(region) %>% summarise()
setdiff(as.character(ConfirmedData$Province.State), CountriesAvailable$region)
View(ConfirmedData)
setdiff(as.character(ConfirmedData$Country.Region), CountriesAvailable$region)
setdiff(as.character(Countriestable$Countries), CountriesAvailable$region)
library(rvest)
Main <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series"
# We are saving the links to each CSVs in separate objects
confirmed_Path <- file.path(Main,"time_series_19-covid-Confirmed.csv")
Deaths_Path    <- file.path(Main,"time_series_19-covid-Deaths.csv")
Recoverd_Path  <- file.path(Main,"time_series_19-covid-Recovered.csv")
# Now, we are reading the data stored in each link
ConfirmedData <- read.csv(confirmed_Path,stringsAsFactors = FALSE)
DeathData     <- read.csv(Deaths_Path,stringsAsFactors = FALSE)
RecoveredData <- read.csv(Recoverd_Path,stringsAsFactors = FALSE)
# Based on the region, the information will be fetched and prepared
Region <- "Pakistan"
# This function is important for making the data to be used in animations generated by Plotly
accumulate_by <- function(dat, var) {
var <- lazyeval::f_eval(var, dat)
lvls <- plotly:::getLevels(var)
dats <- lapply(seq_along(lvls),
function(x) {
cbind.data.frame(dat[var %in% lvls[seq(1, x)], ],
frame = lvls[[x]])})
dplyr::bind_rows(dats)}
# This DataClean function is requried to change the wide table into long table and then filtering the data according to region mentioned above
DataClean <- function(data, region, CaseType) {
CleanedData <- data %>%
pivot_longer(cols = starts_with("X"),
names_to = "Date",
names_prefix = "X",
names_ptypes = list(week = integer()),
values_to = CaseType,
values_drop_na = TRUE)   %>%
mutate(Province.State = ifelse(Province.State %in% "", Country.Region, Province.State)) %>%
mutate(Date = as.Date(Date, "%m.%d.%y")) %>%
filter(Province.State == region) %>%
arrange(Date) %>%
mutate(ID = row_number())
return(CleanedData)
}
# Now we are cleaning data for each case
ConData <- DataClean(ConfirmedData,Region,"Confirmed")
RecData <- DataClean(RecoveredData,Region,"Recovered") %>% dplyr::select(ID,Recovered)
DeData <-DataClean(DeathData,Region,"Deaths")          %>% dplyr::select(ID,Deaths)
AllData <- list(ConData, RecData, DeData)              %>% reduce(left_join, by = "ID")
# In this code, we are generating the frames for animations.
frames <- AllData %>% accumulate_by(~ID)
################
library(stringr)
library(maps)
library(ggplot2)
library(sf)
library(dplyr)
library(raster)
library(GADMTools)
library(rgeos)
URL <- "https://www.cdc.gov/coronavirus/2019-ncov/cases-updates/world-map.html"
# Web Scrap the URL. XPath will be copied from URL.
PAGE <- read_html(URL) %>%
########## Updated for change in the strucutre of CDC
html_nodes(xpath="/html/body/div[7]/main/div[3]/div/div[3]/div[2]") %>%
purrr::map(~html_nodes(.x, 'li') %>%
html_text() %>%
gsub(pattern = '\\t|\\r|\\n', replacement = ''))
countries <- PAGE[[1]]
#countries
# countries_updated <- ifelse(countries  == "United States", "USA", countries)
# Convert to Dataframe
countries <- as.data.frame(matrix(unlist(countries),nrow=length(countries),byrow=TRUE))
#countries
names(countries)[1] <- "Countries"
Countriestable <- data.frame(Sr.No.=seq.int(nrow(countries)),countries)
AllCountries <- map_data("world")
class(AllCountries)
AllCountries
# write(AllCountries$region,"NamesOfCountries.txt")
CountriesAvailable<- AllCountries %>% group_by(region) %>% summarise()
setdiff(as.character(Countriestable$Countries), CountriesAvailable$region)
Countriestable$Countries
# Changes reqruied in the names of the countries
Countriestable$Countries <- recode(Countriestable$Countries, "United States" = "USA")
Countriestable$Countries <- recode(Countriestable$Countries, "United Kingdom" = "UK")
# Updated on 19-03-20: Change of Republic of Korea to South Korea
Countriestable$Countries <- recode(Countriestable$Countries, "The Republic of Korea" = "South Korea")
#Update
Countriestable$Countries <- recode(Countriestable$Countries, "North Macedonia" = "Macedonia")
Countriestable$Countries <- recode(Countriestable$Countries, "Bosnia" = "Bosnia and Herzegovina")
Countriestable$Countries <- recode(Countriestable$Countries, "Holy See (Vatican City)" = "Vatican")
Countriestable$Countries <- recode(Countriestable$Countries, "Czechia" = "Czech Republic")
# Update Dated 12-03-2020
Countriestable$Countries <- recode(Countriestable$Countries, "Brunei Darussalam" = "Brunei")
#Updated on 19-03-2020
Countriestable$Countries <- recode(Countriestable$Countries, "Eswatini" = "Swaziland")
Countriestable$Countries <- recode(Countriestable$Countries, "Ivory Coast (Côte d’Ivoire)" = "Ivory Coast")
Countriestable$Countries <- recode(Countriestable$Countries, "Congo" = "Democratic Republic of the Congo")
# Deleted the combinations of countries and the duplicated values. Combinations will be added later on for append separately.
#Updated on 19-03-2020
Countriestable<-Countriestable[!(Countriestable$Countries=="Antigua and Barbuda"),]
Countriestable<-Countriestable[!(Countriestable$Countries=="Democratic Republic of Congo"),]
Countriestable<-Countriestable[!(Countriestable$Countries=="Saint Vincent and the Grenadines"),]
Countriestable <- Countriestable[!(Countriestable$Countries=="Trinidad and Tobago"),]
#Updated on 19-03-2020
Country_Antigua <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Antigua")
Countriestable <-  rbind(Countriestable, Country_Antigua)
Country_Barbuda <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Barbuda")
Countriestable <-  rbind(Countriestable, Country_Barbuda)
# Added two new names and deleted their combination
#Updated on 19-03-2020
Country_SaintVincent <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Saint Vincent")
Countriestable <-  rbind(Countriestable, Country_SaintVincent)
Country_Grenadines <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Grenadines")
Countriestable <-  rbind(Countriestable, Country_Grenadines)
# Added two new names and deleted their combination
#Updated on 19-03-2020
Country_Trinidad <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Trinidad")
Countriestable <-  rbind(Countriestable, Country_Trinidad)
Country_Tobago <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Tobago")
Countriestable <-  rbind(Countriestable, Country_Tobago)
# ==============================
flexdash_path <- "F:/FINAL_CODES/Need to be uploaded into Github/flexdashboard/data"
shinyapp_path <- "F:/FINAL_CODES/R_Codes/Corona/ShinyApp/Corona/data"
write.csv(AllData,file.path(flexdash_path, "AllData.csv"), row.names = FALSE)
write.csv(AllData,file.path(shinyapp_path, "AllData.csv"), row.names = FALSE)
write.csv(frames,file.path(flexdash_path, "frames.csv"), row.names = FALSE)
write.csv(frames,file.path(shinyapp_path, "frames.csv"), row.names = FALSE)
write.csv(Countriestable,file.path(flexdash_path, "Countriestable.csv"), row.names = FALSE)
write.csv(Countriestable,file.path(shinyapp_path, "Countriestable.csv"), row.names = FALSE)
library(rvest)
Main <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series"
# We are saving the links to each CSVs in separate objects
confirmed_Path <- file.path(Main,"time_series_19-covid-Confirmed.csv")
Deaths_Path    <- file.path(Main,"time_series_19-covid-Deaths.csv")
Recoverd_Path  <- file.path(Main,"time_series_19-covid-Recovered.csv")
# Now, we are reading the data stored in each link
ConfirmedData <- read.csv(confirmed_Path,stringsAsFactors = FALSE)
DeathData     <- read.csv(Deaths_Path,stringsAsFactors = FALSE)
RecoveredData <- read.csv(Recoverd_Path,stringsAsFactors = FALSE)
Region <- "Pakistan"
# This function is important for making the data to be used in animations generated by Plotly
accumulate_by <- function(dat, var) {
var <- lazyeval::f_eval(var, dat)
lvls <- plotly:::getLevels(var)
dats <- lapply(seq_along(lvls),
function(x) {
cbind.data.frame(dat[var %in% lvls[seq(1, x)], ],
frame = lvls[[x]])})
dplyr::bind_rows(dats)}
# This DataClean function is requried to change the wide table into long table and then filtering the data according to region mentioned above
DataClean <- function(data, region, CaseType) {
CleanedData <- data %>%
pivot_longer(cols = starts_with("X"),
names_to = "Date",
names_prefix = "X",
names_ptypes = list(week = integer()),
values_to = CaseType,
values_drop_na = TRUE)   %>%
mutate(Province.State = ifelse(Province.State %in% "", Country.Region, Province.State)) %>%
mutate(Date = as.Date(Date, "%m.%d.%y")) %>%
filter(Province.State == region) %>%
arrange(Date) %>%
mutate(ID = row_number())
return(CleanedData)
}
# Now we are cleaning data for each case
ConData <- DataClean(ConfirmedData,Region,"Confirmed")
RecData <- DataClean(RecoveredData,Region,"Recovered") %>% dplyr::select(ID,Recovered)
DeData <-DataClean(DeathData,Region,"Deaths")          %>% dplyr::select(ID,Deaths)
AllData <- list(ConData, RecData, DeData)              %>% reduce(left_join, by = "ID")
# In this code, we are generating the frames for animations.
frames <- AllData %>% accumulate_by(~ID)
library(stringr)
library(maps)
library(ggplot2)
library(sf)
library(dplyr)
library(raster)
library(GADMTools)
library(rgeos)
URL <- "https://www.cdc.gov/coronavirus/2019-ncov/cases-updates/world-map.html"
# Web Scrap the URL. XPath will be copied from URL.
PAGE <- read_html(URL) %>%
########## Updated for change in the strucutre of CDC
html_nodes(xpath="/html/body/div[7]/main/div[3]/div/div[3]/div[2]") %>%
purrr::map(~html_nodes(.x, 'li') %>%
html_text() %>%
gsub(pattern = '\\t|\\r|\\n', replacement = ''))
countries <- PAGE[[1]]
#countries
# countries_updated <- ifelse(countries  == "United States", "USA", countries)
# Convert to Dataframe
countries <- as.data.frame(matrix(unlist(countries),nrow=length(countries),byrow=TRUE))
#countries
names(countries)[1] <- "Countries"
Countriestable <- data.frame(Sr.No.=seq.int(nrow(countries)),countries)
AllCountries <- map_data("world")
class(AllCountries)
AllCountries
CountriesAvailable<- AllCountries %>% group_by(region) %>% summarise()
setdiff(as.character(Countriestable$Countries), CountriesAvailable$region)
Countriestable$Countries
# Changes reqruied in the names of the countries
Countriestable$Countries <- recode(Countriestable$Countries, "United States" = "USA")
Countriestable$Countries <- recode(Countriestable$Countries, "United Kingdom" = "UK")
# Updated on 19-03-20: Change of Republic of Korea to South Korea
Countriestable$Countries <- recode(Countriestable$Countries, "The Republic of Korea" = "South Korea")
#Update
Countriestable$Countries <- recode(Countriestable$Countries, "North Macedonia" = "Macedonia")
Countriestable$Countries <- recode(Countriestable$Countries, "Bosnia" = "Bosnia and Herzegovina")
Countriestable$Countries <- recode(Countriestable$Countries, "Holy See (Vatican City)" = "Vatican")
Countriestable$Countries <- recode(Countriestable$Countries, "Czechia" = "Czech Republic")
# Update Dated 12-03-2020
Countriestable$Countries <- recode(Countriestable$Countries, "Brunei Darussalam" = "Brunei")
#Updated on 19-03-2020
Countriestable$Countries <- recode(Countriestable$Countries, "Eswatini" = "Swaziland")
Countriestable$Countries <- recode(Countriestable$Countries, "Ivory Coast (Côte d’Ivoire)" = "Ivory Coast")
Countriestable$Countries <- recode(Countriestable$Countries, "Congo" = "Democratic Republic of the Congo")
# Deleted the combinations of countries and the duplicated values. Combinations will be added later on for append separately.
#Updated on 19-03-2020
Countriestable<-Countriestable[!(Countriestable$Countries=="Antigua and Barbuda"),]
Countriestable<-Countriestable[!(Countriestable$Countries=="Democratic Republic of Congo"),]
Countriestable<-Countriestable[!(Countriestable$Countries=="Saint Vincent and the Grenadines"),]
Countriestable <- Countriestable[!(Countriestable$Countries=="Trinidad and Tobago"),]
#Updated on 19-03-2020
Country_Antigua <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Antigua")
Countriestable <-  rbind(Countriestable, Country_Antigua)
Country_Barbuda <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Barbuda")
Countriestable <-  rbind(Countriestable, Country_Barbuda)
# Added two new names and deleted their combination
#Updated on 19-03-2020
Country_SaintVincent <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Saint Vincent")
Countriestable <-  rbind(Countriestable, Country_SaintVincent)
Country_Grenadines <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Grenadines")
Countriestable <-  rbind(Countriestable, Country_Grenadines)
# Added two new names and deleted their combination
#Updated on 19-03-2020
Country_Trinidad <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Trinidad")
Countriestable <-  rbind(Countriestable, Country_Trinidad)
Country_Tobago <- data.frame(Sr.No.=nrow(Countriestable)+1,Countries="Tobago")
Countriestable <-  rbind(Countriestable, Country_Tobago)
flexdash_path <- "F:/FINAL_CODES/Need to be uploaded into Github/flexdashboard/data"
shinyapp_path <- "F:/FINAL_CODES/R_Codes/Corona/ShinyApp/Corona/data"
write.csv(AllData,file.path(flexdash_path, "AllData.csv"), row.names = FALSE)
write.csv(AllData,file.path(shinyapp_path, "AllData.csv"), row.names = FALSE)
write.csv(frames,file.path(flexdash_path, "frames.csv"), row.names = FALSE)
write.csv(frames,file.path(shinyapp_path, "frames.csv"), row.names = FALSE)
write.csv(Countriestable,file.path(flexdash_path, "Countriestable.csv"), row.names = FALSE)
write.csv(Countriestable,file.path(shinyapp_path, "Countriestable.csv"), row.names = FALSE)
runApp('F:/FINAL_CODES/R_Codes/Corona/ShinyApp/Corona')
